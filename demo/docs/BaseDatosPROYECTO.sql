
DROP TABLE Servicio_A_Prestar CASCADE CONSTRAINTS;
DROP TABLE Ips_Prestacion CASCADE CONSTRAINTS;
DROP TABLE Contratados_En CASCADE CONSTRAINTS;
DROP TABLE Agendas CASCADE CONSTRAINTS;
DROP TABLE Ordenes CASCADE CONSTRAINTS;
DROP TABLE Servicios CASCADE CONSTRAINTS;
DROP TABLE Medicos CASCADE CONSTRAINTS;
DROP TABLE IPS CASCADE CONSTRAINTS;
DROP TABLE Afiliados CASCADE CONSTRAINTS;

-- ======================================================
-- Modelo de Base de Datos EPSANDES - Versión Modificada
-- ======================================================

-- 1. Tabla de Afiliados
CREATE TABLE Afiliados (
    identificacion      VARCHAR2(20) PRIMARY KEY,  -- User Assigned
    tipo_documento      VARCHAR2(5)   NOT NULL,
    nombre              VARCHAR2(100) NOT NULL,
    fecha_nacimiento    DATE          NOT NULL,
    direccion           VARCHAR2(200) NOT NULL,
    telefono            VARCHAR2(20)  NOT NULL,
    contribuyente       VARCHAR2(20),  -- referencia a otro afiliado (puede ser nulo)
    parentesco          VARCHAR2(50),
    CONSTRAINT CK_Afiliados_TipoDoc CHECK (tipo_documento IN ('CC', 'TI', 'CE', 'RC'))
);

ALTER TABLE Afiliados
  ADD CONSTRAINT FK_Afiliados_Contribuyente FOREIGN KEY (contribuyente)
      REFERENCES Afiliados(identificacion);

--------------------------------------------------
-- 2. Tabla de IPS (Instituciones Prestadoras de Salud)
CREATE TABLE IPS (
    nit         VARCHAR2(20) PRIMARY KEY,  -- User Assigned
    nombre      VARCHAR2(100) NOT NULL,
    direccion   VARCHAR2(200) NOT NULL,
    telefono    VARCHAR2(20)  NOT NULL
);

--------------------------------------------------
-- 3. Tabla de Médicos
CREATE TABLE Medicos (
    registro_medico   VARCHAR2(20) PRIMARY KEY,  -- User Assigned
    identificacion    VARCHAR2(20) NOT NULL,
    tipo_documento    VARCHAR2(5)  NOT NULL,
    nombre            VARCHAR2(100) NOT NULL,
    especialidad      VARCHAR2(50) NOT NULL,
    CONSTRAINT UK_Medicos_identificacion UNIQUE (identificacion),
    CONSTRAINT CK_Medicos_TipoDoc CHECK (tipo_documento IN ('CC', 'TI', 'CE', 'RC'))
);

--------------------------------------------------
-- 4. Tabla de Servicios
CREATE TABLE Servicios (
    id             NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,  -- System Assigned
    tipo_servicio  VARCHAR2(30) NOT NULL,
    nombre         VARCHAR2(100) NOT NULL,
    CONSTRAINT CK_Servicios_TipoServ CHECK (tipo_servicio IN (
          'General', 
          'Especialista', 
          'Control', 
          'Urgencias', 
          'Examen', 
          'Terapia', 
          'ProcedimientoEspecializado', 
          'Hospitalizacion'
    ))
);

--------------------------------------------------
-- 5. Tabla de Ordenes
CREATE TABLE Ordenes (
    numero         NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,  -- System Assigned
    estado         VARCHAR2(20) NOT NULL,
    fecha          DATE          NOT NULL,
    descripcion    VARCHAR2(400) NOT NULL,
    prescritaPor   VARCHAR2(20)  NOT NULL,  -- referencia a Medicos(registro_medico)
    prescritaPara  VARCHAR2(20)  NOT NULL,  -- referencia a Afiliados(identificacion)
    CONSTRAINT CK_Ordenes_Estado CHECK (estado IN ('vigente', 'cancelada', 'completada'))
);

ALTER TABLE Ordenes
  ADD CONSTRAINT FK_Ordenes_Medicos FOREIGN KEY (prescritaPor)
      REFERENCES Medicos(registro_medico);

ALTER TABLE Ordenes
  ADD CONSTRAINT FK_Ordenes_Afiliados FOREIGN KEY (prescritaPara)
      REFERENCES Afiliados(identificacion);

--------------------------------------------------
-- 6. Tabla de Agendas
CREATE TABLE Agendas (
    id             NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,  -- System Assigned
    fecha          TIMESTAMP    NOT NULL,   -- Se almacena fecha y hora
    duracion       NUMBER       NOT NULL,   -- en minutos
    estado         VARCHAR2(20) NOT NULL,
    paciente_cita  VARCHAR2(20),           -- referencia a Afiliados(identificacion), puede ser nula
    medico_cita    VARCHAR2(20) NOT NULL,    -- referencia a Medicos(registro_medico)
    servicio_cita  NUMBER       NOT NULL,    -- referencia a Servicios(id)
    orden_cita     NUMBER,                -- referencia a Ordenes(numero), opcional
    CONSTRAINT CK_Agendas_Duracion CHECK (duracion > 0),
    CONSTRAINT CK_Agendas_Estado CHECK (estado IN ('cancelada', 'terminada', 'ausencia', 'disponible', 'agendada'))
);

ALTER TABLE Agendas
  ADD CONSTRAINT FK_Agendas_Afiliados FOREIGN KEY (paciente_cita)
      REFERENCES Afiliados(identificacion);

ALTER TABLE Agendas
  ADD CONSTRAINT FK_Agendas_Medicos FOREIGN KEY (medico_cita)
      REFERENCES Medicos(registro_medico);

ALTER TABLE Agendas
  ADD CONSTRAINT FK_Agendas_Servicios FOREIGN KEY (servicio_cita)
      REFERENCES Servicios(id);

ALTER TABLE Agendas
  ADD CONSTRAINT FK_Agendas_Ordenes FOREIGN KEY (orden_cita)
      REFERENCES Ordenes(numero);

-- (Opcional) Mantener una restricción única para evitar inserciones con la misma marca de tiempo exacta:
ALTER TABLE Agendas
ADD CONSTRAINT UQ_Agendas_Medico_Fecha UNIQUE (medico_cita, fecha);

--------------------------------------------------
-- 7. Tablas para asociaciones muchos a muchos

-- 7.1. Contratados_En: Relación entre Médicos e IPS
CREATE TABLE Contratados_En (
    registro_medico   VARCHAR2(20) NOT NULL,
    nit               VARCHAR2(20) NOT NULL,
    PRIMARY KEY (registro_medico, nit)
);

ALTER TABLE Contratados_En
  ADD CONSTRAINT FK_Contratados_En_Medicos FOREIGN KEY (registro_medico)
      REFERENCES Medicos(registro_medico);

ALTER TABLE Contratados_En
  ADD CONSTRAINT FK_Contratados_En_IPS FOREIGN KEY (nit)
      REFERENCES IPS(nit);

-- 7.2. Ips_Prestacion: Relación entre IPS y Servicios
CREATE TABLE Ips_Prestacion (
    nit          VARCHAR2(20) NOT NULL,
    servicio_id  NUMBER      NOT NULL,
    PRIMARY KEY (nit, servicio_id)
);

ALTER TABLE Ips_Prestacion
  ADD CONSTRAINT FK_Ips_Prestacion_IPS FOREIGN KEY (nit)
      REFERENCES IPS(nit);

ALTER TABLE Ips_Prestacion
  ADD CONSTRAINT FK_Ips_Prestacion_Servicios FOREIGN KEY (servicio_id)
      REFERENCES Servicios(id);

-- 7.3. Servicio_A_Prestar: Relación entre Servicios y Médicos
CREATE TABLE Servicio_A_Prestar (
    servicio_id     NUMBER      NOT NULL,
    registro_medico VARCHAR2(20) NOT NULL,
    PRIMARY KEY (servicio_id, registro_medico)
);

ALTER TABLE Servicio_A_Prestar
  ADD CONSTRAINT FK_Servicio_A_Prestar_Servicios FOREIGN KEY (servicio_id)
      REFERENCES Servicios(id);

ALTER TABLE Servicio_A_Prestar
  ADD CONSTRAINT FK_Servicio_A_Prestar_Medicos FOREIGN KEY (registro_medico)
      REFERENCES Medicos(registro_medico);

COMMIT;

--------------------------------------------------
-- TRIGGER: Evitar citas superpuestas para el mismo médico
--------------------------------------------------
CREATE OR REPLACE TRIGGER trg_no_overlapping_appointments
BEFORE INSERT OR UPDATE ON Agendas
FOR EACH ROW
DECLARE
  v_count INTEGER;
BEGIN
  SELECT COUNT(*)
    INTO v_count
  FROM Agendas
  WHERE medico_cita = :new.medico_cita
    AND estado <> 'cancelada'
    -- Excluir el mismo registro en caso de UPDATE:
    AND (id <> NVL(:new.id, -1))
    -- Comprobar traslape de intervalos:
    AND (:new.fecha < (fecha + NUMTODSINTERVAL(duracion, 'MINUTE')))
    AND ((:new.fecha + NUMTODSINTERVAL(:new.duracion, 'MINUTE')) > fecha);
  
  IF v_count > 0 THEN
    RAISE_APPLICATION_ERROR(-20001, 'El médico ya tiene una cita que se traslapa en el horario indicado.');
  END IF;
END;
/
COMMIT;
